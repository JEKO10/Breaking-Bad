{"version":3,"sources":["useFetch.js","context.js","components/Categories.js","components/SearchForm.js","components/Header.js","components/Characters.js","components/Episodes.js","components/Quotes.js","poster.jpg","App.js","reportWebVitals.js","index.js"],"names":["useFetch","urlParams","useState","isLoading","setIsLoading","data","setData","fetchData","url","a","fetch","response","json","console","log","useEffect","AppContext","React","createContext","AppProvider","children","query","setQuery","search","setSearch","Provider","value","useGlobalContext","useContext","Categories","className","onClick","length","SearchForm","onSubmit","e","preventDefault","type","onChange","target","Header","Characters","id","map","char","src","img","alt","name","portrayed","nickname","birthday","status","char_id","Episodes","filter","ep","series","title","season","episode","air_date","episode_id","Quotes","quote","author","quote_id","App","Poster","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3c1341b.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst apiLink = \"https://www.breakingbadapi.com/api/\";\r\n\r\nconst useFetch = (urlParams) => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n\r\n  const fetchData = async (url) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(url);\r\n      const data = await response.json();\r\n      setData(data);\r\n      setIsLoading(false);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(`${apiLink}${urlParams}`);\r\n  }, [urlParams]);\r\n\r\n  return { isLoading, data, setIsLoading };\r\n};\r\n\r\nexport default useFetch;\r\n","import React, { useContext, useState } from \"react\";\r\nimport useFetch from \"./useFetch\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [search, setSearch] = useState(\"\");\r\n  const { isLoading, setIsLoading, data } = useFetch(`${query}?name=${search}`);\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        isLoading,\r\n        setIsLoading,\r\n        data,\r\n        query,\r\n        setQuery,\r\n        search,\r\n        setSearch,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst Categories = () => {\r\n  const { setQuery, setIsLoading, data, setSearch } = useGlobalContext();\r\n\r\n  return (\r\n    <section className=\"categories\">\r\n      <button\r\n        onClick={() => {\r\n          setQuery(\"characters\");\r\n          setIsLoading(true);\r\n          if (data.length > 0) {\r\n            setIsLoading(false);\r\n          }\r\n          setSearch(\"\");\r\n        }}\r\n      >\r\n        Char<span>Ac</span>ters\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setQuery(\"episodes\");\r\n          setIsLoading(true);\r\n          if (data.length > 0) {\r\n            setIsLoading(false);\r\n          }\r\n        }}\r\n      >\r\n        Eis<span>O</span>des\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          setQuery(\"quotes\");\r\n          setIsLoading(true);\r\n          if (data.length > 0) {\r\n            setIsLoading(false);\r\n          }\r\n        }}\r\n      >\r\n        Quo<span>Te</span>s\r\n      </button>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import { useGlobalContext } from \"../context\";\r\n\r\nfunction SearchForm() {\r\n  const { search, setSearch } = useGlobalContext();\r\n  return (\r\n    <form onSubmit={(e) => e.preventDefault()}>\r\n      <input\r\n        type=\"text\"\r\n        value={search}\r\n        onChange={(e) => {\r\n          setSearch(e.target.value);\r\n        }}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchForm;\r\n","import Categories from \"./Categories\";\r\nimport SearchForm from \"./SearchForm\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst Header = () => {\r\n  const { query } = useGlobalContext();\r\n\r\n  return (\r\n    <nav>\r\n      <Categories />\r\n      {query === \"characters\" ? <SearchForm /> : \"\"}\r\n    </nav>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nconst Characters = () => {\r\n  const { isLoading, data } = useGlobalContext();\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\"></div>;\r\n  }\r\n  return (\r\n    <section className=\"characters\">\r\n      {data.length === 0 ? <h1 id=\"empty\">No Items!</h1> : \"\"}\r\n      {data.map((char) => {\r\n        return (\r\n          <div key={char.char_id} className=\"card\">\r\n            <div className=\"cardInner\">\r\n              <div className=\"front\">\r\n                <img src={char.img} alt={char.name} />\r\n              </div>\r\n              <div className=\"back\">\r\n                <h1>{char.name}</h1>\r\n                <h4>\r\n                  <strong>Actor name:</strong> {char.portrayed}\r\n                </h4>\r\n                <h4>\r\n                  <strong>Nickname:</strong> {char.nickname}\r\n                </h4>\r\n                <h4>\r\n                  <strong>Birthday:</strong> {char.birthday}\r\n                </h4>\r\n                <h4>\r\n                  <strong>Status:</strong> {char.status}\r\n                </h4>\r\n                {/* <h4>\r\n                  <strong>Occupation:</strong> {char.occupation.join(\", \")}\r\n                </h4> */}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Characters;\r\n// characters;\r\n","import { useGlobalContext } from \"../context\";\r\n\r\nconst Episodes = () => {\r\n  const { isLoading, data } = useGlobalContext();\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\"></div>;\r\n  }\r\n  return (\r\n    <section className=\"episodes\">\r\n      {data\r\n        .filter((ep) => ep.series === \"Breaking Bad\")\r\n        .map((ep) => {\r\n          return (\r\n            <div key={ep.episode_id} className=\"episode\">\r\n              <h1>\r\n                <strong>Title: </strong>\r\n                {ep.title}\r\n              </h1>\r\n              <h1>\r\n                S{ep.season} E{ep.episode}\r\n              </h1>\r\n              <h1>\r\n                <strong>Released: </strong>\r\n                {ep.air_date}\r\n              </h1>\r\n            </div>\r\n          );\r\n        })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Episodes;\r\n","import { useGlobalContext } from \"../context\";\r\n\r\nconst Quotes = () => {\r\n  const { isLoading, data } = useGlobalContext();\r\n\r\n  if (isLoading) {\r\n    return <div className=\"loading\"></div>;\r\n  }\r\n  return (\r\n    <section className=\"quotes\">\r\n      {data\r\n        .filter((quote) => quote.series === \"Breaking Bad\")\r\n        .map((quote) => {\r\n          return (\r\n            <div key={quote.quote_id} className=\"quote\">\r\n              <h1>{quote.quote}</h1>\r\n              <p>{quote.author}</p>\r\n            </div>\r\n          );\r\n        })}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Quotes;\r\n","export default __webpack_public_path__ + \"static/media/poster.fd7807de.jpg\";","import { useGlobalContext } from \"./context\";\nimport Header from \"./components/Header\";\nimport Characters from \"./components/Characters\";\nimport Episodes from \"./components/Episodes\";\nimport Quotes from \"./components/Quotes\";\nimport Poster from \"./poster.jpg\";\n\nfunction App() {\n  const { query } = useGlobalContext();\n\n  return (\n    <main>\n      <Header />\n      {query === \"characters\" ? (\n        <Characters />\n      ) : query === \"episodes\" ? (\n        <Episodes />\n      ) : query === \"quotes\" ? (\n        <Quotes />\n      ) : (\n        <div className=\"landing\">\n          <h1>\n            Cho<span>OS</span>e a <span>C</span>ategor<span>Y</span>\n          </h1>\n          <img src={Poster} alt=\"Poster\" id=\"poster\" />\n        </div>\n      )}\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { AppProvider } from \"./context\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}